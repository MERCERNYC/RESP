{"ast":null,"code":"(function () {\n  \"use strict\";\n\n  var supportsMultiple = self.HTMLInputElement && \"valueLow\" in HTMLInputElement.prototype;\n  var descriptor = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, \"value\");\n\n  var multirange = function (input) {\n    if (supportsMultiple || input.classList.contains(\"multirange\")) {\n      return;\n    }\n\n    var value = input.getAttribute(\"value\");\n    var values = value === null ? [] : value.split(\",\");\n    var min = +(input.min || 0);\n    var max = +(input.max || 100);\n    var ghost = input.cloneNode();\n    input.classList.add(\"multirange\", \"original\");\n    ghost.classList.add(\"multirange\", \"ghost\");\n    input.value = values[0] || min + (max - min) / 2;\n    ghost.value = values[1] || min + (max - min) / 2;\n    input.parentNode.insertBefore(ghost, input.nextSibling);\n    Object.defineProperty(input, \"originalValue\", descriptor.get ? descriptor : {\n      // Fuck you Safari >:(\n      get: function () {\n        return this.value;\n      },\n      set: function (v) {\n        this.value = v;\n      }\n    });\n    Object.defineProperties(input, {\n      valueLow: {\n        get: function () {\n          return Math.min(this.originalValue, ghost.value);\n        },\n        set: function (v) {\n          this.originalValue = v;\n        },\n        enumerable: true\n      },\n      valueHigh: {\n        get: function () {\n          return Math.max(this.originalValue, ghost.value);\n        },\n        set: function (v) {\n          ghost.value = v;\n        },\n        enumerable: true\n      }\n    });\n\n    if (descriptor.get) {\n      // Again, fuck you Safari\n      Object.defineProperty(input, \"value\", {\n        get: function () {\n          return this.valueLow + \",\" + this.valueHigh;\n        },\n        set: function (v) {\n          var values = v.split(\",\");\n          this.valueLow = values[0];\n          this.valueHigh = values[1];\n          update();\n        },\n        enumerable: true\n      });\n    }\n\n    if (typeof input.oninput === \"function\") {\n      ghost.oninput = input.oninput.bind(input);\n    }\n\n    function update() {\n      ghost.style.setProperty(\"--low\", 100 * ((input.valueLow - min) / (max - min)) + 1 + \"%\");\n      ghost.style.setProperty(\"--high\", 100 * ((input.valueHigh - min) / (max - min)) - 1 + \"%\");\n    }\n\n    input.addEventListener(\"input\", update);\n    ghost.addEventListener(\"input\", update);\n    update();\n  };\n\n  multirange.init = function () {\n    [].slice.call(document.querySelectorAll(\"input[type=range][multiple]:not(.multirange)\")).forEach(multirange);\n  };\n\n  if (typeof module === \"undefined\") {\n    self.multirange = multirange;\n\n    if (document.readyState == \"loading\") {\n      document.addEventListener(\"DOMContentLoaded\", multirange.init);\n    } else {\n      multirange.init();\n    }\n  } else {\n    module.exports = multirange;\n  }\n})();","map":null,"metadata":{},"sourceType":"script"}