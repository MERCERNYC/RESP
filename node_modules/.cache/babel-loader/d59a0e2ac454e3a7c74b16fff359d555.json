{"ast":null,"code":"'use strict';\n\nconst mongoErrorContextSymbol = Symbol('mongoErrorContextSymbol');\n/**\n * Creates a new MongoError\n *\n * @augments Error\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\n\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n      this.stack = message.stack;\n    } else {\n      if (typeof message === 'string') {\n        super(message);\n      } else {\n        super(message.message || message.errmsg || message.$err || 'n/a');\n\n        for (var name in message) {\n          this[name] = message[name];\n        }\n      }\n\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = 'MongoError';\n    this[mongoErrorContextSymbol] = this[mongoErrorContextSymbol] || {};\n  }\n  /**\n   * Creates a new MongoError object\n   *\n   * @param {Error|string|object} options The options used to create the error.\n   * @return {MongoError} A MongoError instance\n   * @deprecated Use `new MongoError()` instead.\n   */\n\n\n  static create(options) {\n    return new MongoError(options);\n  }\n\n  hasErrorLabel(label) {\n    return this.errorLabels && this.errorLabels.indexOf(label) !== -1;\n  }\n\n}\n/**\n * Creates a new MongoNetworkError\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n * @property {string} stack The error call stack\n */\n\n\nclass MongoNetworkError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoNetworkError'; // This is added as part of the transactions specification\n\n    this.errorLabels = ['TransientTransactionError'];\n  }\n\n}\n/**\n * An error used when attempting to parse a value (like a connection string)\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n */\n\n\nclass MongoParseError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoParseError';\n  }\n\n}\n/**\n * An error signifying a timeout event\n *\n * @param {Error|string|object} message The error message\n * @property {string} message The error message\n */\n\n\nclass MongoTimeoutError extends MongoError {\n  constructor(message) {\n    super(message);\n    this.name = 'MongoTimeoutError';\n  }\n\n}\n\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n *\n * @param {Error|string|object} message The error message\n * @param {object} result The result document (provided if ok: 1)\n * @property {string} message The error message\n * @property {object} [result] The result document (provided if ok: 1)\n */\n\n\nclass MongoWriteConcernError extends MongoError {\n  constructor(message, result) {\n    super(message);\n    this.name = 'MongoWriteConcernError';\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n} // see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\n\n\nconst RETRYABLE_ERROR_CODES = new Set([6, // HostUnreachable\n7, // HostNotFound\n89, // NetworkTimeout\n91, // ShutdownInProgress\n189, // PrimarySteppedDown\n9001, // SocketException\n10107, // NotMaster\n11600, // InterruptedAtShutdown\n11602, // InterruptedDueToReplStateChange\n13435, // NotMasterNoSlaveOk\n13436 // NotMasterOrSecondary\n]);\n/**\n * Determines whether an error is something the driver should attempt to retry\n *\n * @param {MongoError|Error} error\n */\n\nfunction isRetryableError(error) {\n  return RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || error.message.match(/not master/) || error.message.match(/node is recovering/);\n}\n\nmodule.exports = {\n  MongoError,\n  MongoNetworkError,\n  MongoParseError,\n  MongoTimeoutError,\n  MongoWriteConcernError,\n  mongoErrorContextSymbol,\n  isRetryableError\n};","map":null,"metadata":{},"sourceType":"script"}