{"ast":null,"code":"var _jsxFileName = \"/home/abiery/Projects/RESP/src/Components/App.js\";\nimport React, { Component } from \"react\";\nimport { Stitch, AnonymousCredential, RemoteMongoClient } from \"mongodb-stitch-browser-sdk\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      people: [],\n      first: undefined,\n      last: undefined,\n      mi: undefined,\n      dob: undefined,\n      sex: undefined,\n      height: undefined,\n      weight: undefined,\n      race: undefined,\n      campsite: undefined,\n      description: undefined,\n      image: undefined\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.displayTodos = this.displayTodos.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentDidMount() {\n    // Initialize the App Client\n    this.client = Stitch.initializeDefaultAppClient(\"resp-nqkab\"); // Get a MongoDB Service Client\n    // This is used for logging in and communicating with Stitch\n\n    const mongodb = this.client.getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\"); // Get a reference to the todo database\n\n    this.db = mongodb.db(\"sample_disaster\");\n    this.displayTodosOnLoad();\n  }\n\n  displayTodos() {\n    // query the remote DB and update the component state\n    this.db.collection(\"found\").find({}, {\n      limit: 1000\n    }).asArray().then(todos => {\n      this.setState({\n        todos\n      });\n    });\n  }\n\n  displayTodosOnLoad() {\n    // Anonymously log in and display comments on load\n    this.client.auth.loginWithCredential(new AnonymousCredential()).then(this.displayTodos).catch(console.error);\n  }\n\n  addTodo(event) {\n    event.preventDefault();\n    const value = this.state.value;\n    this.db.collection(\"found\").insertOne({\n      owner_id: this.client.auth.user.id,\n      item: value\n    }).then(this.displayTodos).catch(console.error);\n  }\n\n  handleChange(event) {\n    this.setState({\n      value: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"This is a todo app\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Add a Todo Item:\"), React.createElement(\"form\", {\n      onSubmit: this.addTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.value,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    })), React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    })), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, this.state.todos.map(todo => {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, todo.item);\n    })));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/abiery/Projects/RESP/src/Components/App.js"],"names":["React","Component","Stitch","AnonymousCredential","RemoteMongoClient","App","constructor","state","people","first","undefined","last","mi","dob","sex","height","weight","race","campsite","description","image","handleChange","bind","displayTodos","addTodo","componentDidMount","client","initializeDefaultAppClient","mongodb","getServiceClient","factory","db","displayTodosOnLoad","collection","find","limit","asArray","then","todos","setState","auth","loginWithCredential","catch","console","error","event","preventDefault","value","insertOne","owner_id","user","id","item","target","render","map","todo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from \"mongodb-stitch-browser-sdk\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      people: [],\n      first: undefined,\n      last: undefined,\n      mi: undefined,\n      dob: undefined,\n      sex: undefined,\n      height: undefined,\n      weight: undefined,\n      race: undefined,\n      campsite: undefined,\n      description: undefined,\n      image: undefined\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.displayTodos = this.displayTodos.bind(this);\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentDidMount() {\n    // Initialize the App Client\n    this.client = Stitch.initializeDefaultAppClient(\"resp-nqkab\");    // Get a MongoDB Service Client\n    // This is used for logging in and communicating with Stitch\n    const mongodb = this.client.getServiceClient(\n      RemoteMongoClient.factory,\n      \"mongodb-atlas\"\n    );    // Get a reference to the todo database\n    this.db = mongodb.db(\"sample_disaster\");\n    this.displayTodosOnLoad();\n  }\n\n  displayTodos() {\n    // query the remote DB and update the component state\n    this.db\n      .collection(\"found\")\n      .find({}, { limit: 1000 })\n      .asArray()\n      .then(todos => {\n        this.setState({todos});\n      });\n   }  displayTodosOnLoad() {\n    // Anonymously log in and display comments on load\n    this.client.auth\n      .loginWithCredential(new AnonymousCredential())\n      .then(this.displayTodos)\n      .catch(console.error);\n  }  addTodo(event) {\n    event.preventDefault();\n    const { value } = this.state;\n    this.db\n      .collection(\"found\")\n      .insertOne({\n        owner_id: this.client.auth.user.id,\n        item: value\n      })\n      .then(this.displayTodos)\n      .catch(console.error);\n  }  handleChange(event) {\n    this.setState({ value: event.target.value });\n  }render() {\n    return (\n      <div className=\"App\">\n        <h3>This is a todo app</h3>\n        <hr />\n        <p>Add a Todo Item:</p>\n        <form onSubmit={this.addTodo}>\n          <label>\n            <input\n              type=\"text\"\n              value={this.state.value}\n              onChange={this.handleChange}\n            />\n          </label>\n          <input type=\"submit\" value=\"Submit\" />\n        </form>\n        <ul>\n          {this.state.todos.map(todo => {\n            return <li>{todo.item}</li>;\n          })}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}