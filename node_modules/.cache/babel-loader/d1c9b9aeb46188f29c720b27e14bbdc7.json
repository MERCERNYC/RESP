{"ast":null,"code":"// gridfs-stream\n\n/**\n * Module dependencies.\n */\nvar GridWriteStream = require('./writestream');\n\nvar GridReadStream = require('./readstream');\n/**\n * Grid constructor\n *\n * @param {mongo.Db} db - an open mongo.Db instance\n * @param {mongo} [mongo] - the native driver you are using\n */\n\n\nfunction Grid(db, mongo) {\n  if (!(this instanceof Grid)) {\n    return new Grid(db, mongo);\n  }\n\n  mongo || (mongo = Grid.mongo ? Grid.mongo : undefined);\n  if (!mongo) throw new Error('missing mongo argument\\nnew Grid(db, mongo)');\n  if (!db) throw new Error('missing db argument\\nnew Grid(db, mongo)'); // the db must already be open b/c there is no `open` event emitted\n  // in old versions of the driver\n\n  this.db = db;\n  this.mongo = mongo;\n  this.curCol = this.mongo.GridStore ? this.mongo.GridStore.DEFAULT_ROOT_COLLECTION : 'fs';\n}\n/**\n * Creates a writable stream.\n *\n * @param {Object} [options]\n * @return Stream\n */\n\n\nGrid.prototype.createWriteStream = function (options) {\n  return new GridWriteStream(this, options);\n};\n/**\n * Creates a readable stream. Pass at least a filename or _id option\n *\n * @param {Object} options\n * @return Stream\n */\n\n\nGrid.prototype.createReadStream = function (options) {\n  return new GridReadStream(this, options);\n};\n/**\n * The collection used to store file data in mongodb.\n * @return {Collection}\n */\n\n\nObject.defineProperty(Grid.prototype, 'files', {\n  get: function () {\n    if (this._col) return this._col;\n    return this.collection();\n  }\n});\n/**\n * Changes the default collection to `name` or to the default mongodb gridfs collection if not specified.\n *\n * @param {String|undefined} name root gridfs collection name\n * @return {Collection}\n */\n\nGrid.prototype.collection = function (name) {\n  this.curCol = name || this.curCol || this.mongo.GridStore.DEFAULT_ROOT_COLLECTION;\n  return this._col = this.db.collection(this.curCol + \".files\");\n};\n/**\n * Removes a file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\n\nGrid.prototype.remove = function (options, callback) {\n  var _id;\n\n  if (options._id) {\n    _id = this.tryParseObjectId(options._id) || options._id;\n  }\n\n  if (!_id) {\n    _id = options.filename;\n  }\n\n  return this.mongo.GridStore.unlink(this.db, _id, options, callback);\n};\n/**\n * Checks if a file exists by passing a filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\n\nGrid.prototype.exist = function (options, callback) {\n  var _id;\n\n  if (options._id) {\n    _id = this.tryParseObjectId(options._id) || options._id;\n  }\n\n  if (!_id) {\n    _id = options.filename;\n  }\n\n  return this.mongo.GridStore.exist(this.db, _id, options.root, callback);\n};\n/**\n * Find file by passing any options, at least an _id or filename\n *\n * @param {Object} options\n * @param {Function} callback\n */\n\n\nGrid.prototype.findOne = function (options, callback) {\n  if ('function' != typeof callback) {\n    throw new Error('findOne requires a callback function');\n  }\n\n  var find = {};\n\n  for (var n in options) {\n    if (n != 'root') {\n      find[n] = options[n];\n    }\n  }\n\n  if (find._id) {\n    find._id = this.tryParseObjectId(find._id) || find._id;\n  }\n\n  var collection = options.root && options.root != this.curCol ? this.db.collection(options.root + \".files\") : this.files;\n\n  if (!collection) {\n    return callback(new Error('No collection specified'));\n  }\n\n  collection.find(find, function (err, cursor) {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!cursor) {\n      return callback(new Error('Collection not found'));\n    }\n\n    cursor.nextObject(callback);\n  });\n};\n/**\n * Attemps to parse `string` into an ObjectId\n *\n * @param {GridReadStream} self\n * @param {String|ObjectId} string\n * @return {ObjectId|Boolean}\n */\n\n\nGrid.prototype.tryParseObjectId = function tryParseObjectId(string) {\n  try {\n    return new this.mongo.ObjectID(string);\n  } catch (_) {\n    return false;\n  }\n};\n/**\n * expose\n */\n\n\nmodule.exports = exports = Grid;","map":null,"metadata":{},"sourceType":"script"}