{"ast":null,"code":"/*\n * FlushWritable\n * Copyright 2014 Tom Frost\n */\nvar EventEmitter = require('events').EventEmitter,\n    Writable = require('stream').Writable,\n    util = require('util');\n/**\n * FlushWritable is a drop-in replacement for stream.Writable that implements\n * the Transform stream's _flush() method.  FlushWritable is meant to be\n * extended, just like stream.Writable.  However, in the child class's\n * prototype, a method called _flush(cb) can be defined that will halt the\n * firing of the 'finish' event until the callback is called.  If the callback\n * if called with a truthy first argument, 'error' is emitted instead.\n * @param {Object} [opts] Options to configure this Writable stream.  See the\n *      Node.js docs for stream.Writable.\n * @constructor\n */\n\n\nfunction FlushWritable(opts) {\n  Writable.call(this, opts);\n}\n\nutil.inherits(FlushWritable, Writable);\n\nFlushWritable.prototype.emit = function (evt) {\n  if (evt === 'finish' && this._flush && !Writable.prototype._flush) {\n    this._flush(function (err) {\n      if (err) EventEmitter.prototype.emit.call(this, 'error', err);else EventEmitter.prototype.emit.call(this, 'finish');\n    }.bind(this));\n  } else {\n    var args = Array.prototype.slice.call(arguments);\n    EventEmitter.prototype.emit.apply(this, args);\n  }\n};\n\nmodule.exports = FlushWritable;","map":null,"metadata":{},"sourceType":"script"}